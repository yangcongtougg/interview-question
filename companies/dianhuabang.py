# _*_ coding: utf-8 _*_
# @Time     :2018/3/13 12:31
# @Author   :maxzhangcong
# @Email    :maxzhangcong@163.com

"""
    *************模块文档注释**************
    电话帮
"""


# 1、有一个dict对象，包含了100万个key，问平均找到某个key需要多长时间，1000万个key呢？
# dict底层是hash实现的，数组+链表+红黑树，对key进行散列函数的映射，散列结果为value的存储地址，散列函数一般使用线性探测在散列解决散列冲突


# **********************************************************************************************************
# 2、有一个list，其中的元素都为字符串，写一个大小写无关的排序
def str_sorted():
    a = ['a', 'b', 'c', 'ab', 'ba', 'ca', 'zhang', 'cong']

    b = ''.join((lambda x: (x.sort(), x)[1])(list(a)))
    print(b)


# ***********************************************************************************************************
# 3、有一个排好序的list，试着寻找其中的某个元素，代码如何写？

def bianry_search(arr, item):
    n = len(arr)
    if n > 0:
        mid_point = n // 2
        if arr[mid_point] == item:
            return True
        elif item < arr[mid_point]:
            return bianry_search(arr[:mid_point], item)
        else:
            return bianry_search(arr[mid_point:], item)
    return False


# ***********************************************************************************************************
# 4、python中stack这种数据结构是什么，有什么优缺点? stack应用举例
# stack这种数据结构叫做栈
# 栈的优点：>>>栈是FILO，每个function包括main()方法创建的临时变量都被压进栈中，funciton退出时，变量也被退推出，释放的空间供其他变量使用
# 栈内存是直接由cup来进行管理的不用手动的创建内存空间，读写都十分的快速，
# 栈的缺点：>>>只有局部变量，栈空间是有大小的(取决于操作系统)，变量不能调节大小
# 什么是堆：>>>堆相较于栈来说是一块更大的内存，不被cpu密切管理，使用堆需要手动创建内存和释放malloc(),free()
# 堆的优点：>>>变量可以全局访问，没有内存大小的限制，大小可以有malloc调整
# 堆的缺点: >>>访问较慢，时间长了堆的创建和销毁会产生内存碎片，必须手动管理内存，管理不善的话会造成内存泄漏
# 栈的应用：>>>函数变量，递归
# 什么时候用堆？什么时候用栈？>>>需要内存大(例如数组和结构体)并且动态增加或减少用堆，在函数体中使用并且很小的变量则用栈
# ***********************************************************************************************************


# 5、list 列表去重
# 可以用常规的for循环，set结构
def mange_repet_list(arr):
    a = []
    for i in arr:
        if i not in a:
            a.append(i)
    print(a)


def mange_repet_list2(arr):
    b = sorted(set(arr), key=arr.index)
    print(b)


# ***********************************************************************************************************

# 6、列表求交集
def intersection():
    a = [1, 2, 3, 4, 5, 6, 7, 8]
    b = [1, 2]
    re_a = [i for i in a if i in b]
    print(re_a)

    re_b = list(set(a).intersection(set(b)))
    print(re_b)


# ***********************************************************************************************************
# 7、dict的items与iteritems的异同

# dict返回的是列表，其中包含了key，value值
# iteritems返回的是迭代器对象，一次只返回一个值，直到没有为止

# ***********************************************************************************************************

# 8、读取文件去掉换行符，输出到另一个文件
def open_file():
    try:
        a = open(r'c:\Users\renrenlabzc\Desktop\urls.txt', 'r')
        for i in a.readlines():
            with open(r'c:\Users\renrenlabzc\Desktop\urls2.txt', 'a+')as f:
                f.write(i.strip('\n'))
    finally:
        if a:
            a.close()


# ***********************************************************************************************************
# 9、string的函数式
# join、len、find、strip、format、max、min

# ***********************************************************************************************************
# 10、用random打乱一个list

def break_list():
    a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    import random
    random.shuffle(a)
    print(a)


# ***********************************************************************************************************

# 11、a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# 每个元素+1
# 把偶数去掉
# 每个元素相乘
def change_list():
    from functools import reduce
    a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    c = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

    a1 = map(lambda x: x + 1, a)
    print(list(a1))
    b1 = filter(lambda x: x % 2 != 0, b)
    print(list(b1))
    c1 = reduce(lambda x, y: x * y, c)
    print(c1)


# ***********************************************************************************************************

# 12、初始化一个list，其中元素依次为x的10次方数x为(1,2,3,4,5)
def init_list():
    a = []
    n = 1
    for i in range(5):
        a.append(10 ** n)
        n += 1
    print(a)


# ***********************************************************************************************************
# 13、利用re匹配电话号码10位电话号码
def re_match_str():
    s = '你我还哦啊的阿斯兰的街坊邻居阿三两队交锋拉家乐福 This is电话：02-2511-6530，商品编号：05-1423，请来电0928837577'
    import re
    s1 = re.search('[0-9]{10}', s)
    print()


# ***********************************************************************************************************
# 说说你常用的三方库
#

# ***********************************************************************************************************
if __name__ == "__main__":
    # 2、********************************
    str_sorted()
    # 3、********************************
    a = [1, 2, 3, 4, 5, 5]
    print(bianry_search(a, 1))
    # 5、********************************
    mange_repet_list(a)
    mange_repet_list2(a)
    # 6、***************************************
    intersection()
    # 8、***************************************
    # open_file()
    # 10、***************************************
    break_list()
    # 11、***************************************
    change_list()
    # 12、***************************************
    init_list()
    # 13、***************************************
    re_match_str()
